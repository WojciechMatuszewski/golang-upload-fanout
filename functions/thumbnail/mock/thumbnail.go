// Code generated by MockGen. DO NOT EDIT.
// Source: ../thumbnail.go

// Package mock is a generated GoMock package.
package mock

import (
	bytes "bytes"
	context "context"
	gomock "github.com/golang/mock/gomock"
	image "image"
	io "io"
	reflect "reflect"
	s3 "testing-stuff/platform/s3"
)

// MockThumbnailResizer is a mock of ThumbnailResizer interface
type MockThumbnailResizer struct {
	ctrl     *gomock.Controller
	recorder *MockThumbnailResizerMockRecorder
}

// MockThumbnailResizerMockRecorder is the mock recorder for MockThumbnailResizer
type MockThumbnailResizerMockRecorder struct {
	mock *MockThumbnailResizer
}

// NewMockThumbnailResizer creates a new mock instance
func NewMockThumbnailResizer(ctrl *gomock.Controller) *MockThumbnailResizer {
	mock := &MockThumbnailResizer{ctrl: ctrl}
	mock.recorder = &MockThumbnailResizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockThumbnailResizer) EXPECT() *MockThumbnailResizerMockRecorder {
	return m.recorder
}

// ResizeToThumbnail mocks base method
func (m *MockThumbnailResizer) ResizeToThumbnail(img image.Image) *image.NRGBA {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeToThumbnail", img)
	ret0, _ := ret[0].(*image.NRGBA)
	return ret0
}

// ResizeToThumbnail indicates an expected call of ResizeToThumbnail
func (mr *MockThumbnailResizerMockRecorder) ResizeToThumbnail(img interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeToThumbnail", reflect.TypeOf((*MockThumbnailResizer)(nil).ResizeToThumbnail), img)
}

// MockUploaderDownloader is a mock of UploaderDownloader interface
type MockUploaderDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderDownloaderMockRecorder
}

// MockUploaderDownloaderMockRecorder is the mock recorder for MockUploaderDownloader
type MockUploaderDownloaderMockRecorder struct {
	mock *MockUploaderDownloader
}

// NewMockUploaderDownloader creates a new mock instance
func NewMockUploaderDownloader(ctrl *gomock.Controller) *MockUploaderDownloader {
	mock := &MockUploaderDownloader{ctrl: ctrl}
	mock.recorder = &MockUploaderDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUploaderDownloader) EXPECT() *MockUploaderDownloaderMockRecorder {
	return m.recorder
}

// UploadFromReader mocks base method
func (m *MockUploaderDownloader) UploadFromReader(ctx context.Context, bucket string, reader io.Reader, fi s3.FileInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFromReader", ctx, bucket, reader, fi)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFromReader indicates an expected call of UploadFromReader
func (mr *MockUploaderDownloaderMockRecorder) UploadFromReader(ctx, bucket, reader, fi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFromReader", reflect.TypeOf((*MockUploaderDownloader)(nil).UploadFromReader), ctx, bucket, reader, fi)
}

// Download mocks base method
func (m *MockUploaderDownloader) Download(ctx context.Context, bucket, key string) (*image.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, bucket, key)
	ret0, _ := ret[0].(*image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download
func (mr *MockUploaderDownloaderMockRecorder) Download(ctx, bucket, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockUploaderDownloader)(nil).Download), ctx, bucket, key)
}

// MockEncoder is a mock of Encoder interface
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// EncodeToBuffer mocks base method
func (m *MockEncoder) EncodeToBuffer(img image.Image, ext string) (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeToBuffer", img, ext)
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeToBuffer indicates an expected call of EncodeToBuffer
func (mr *MockEncoderMockRecorder) EncodeToBuffer(img, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeToBuffer", reflect.TypeOf((*MockEncoder)(nil).EncodeToBuffer), img, ext)
}
