// Code generated by MockGen. DO NOT EDIT.
// Source: ../upload.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	multipart "mime/multipart"
	reflect "reflect"
	s3 "testing-stuff/platform/s3"
)

// MockReader is a mock of Reader interface
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// ReadBase64Encoded mocks base method
func (m *MockReader) ReadBase64Encoded(d, ct string) (*multipart.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBase64Encoded", d, ct)
	ret0, _ := ret[0].(*multipart.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBase64Encoded indicates an expected call of ReadBase64Encoded
func (mr *MockReaderMockRecorder) ReadBase64Encoded(d, ct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBase64Encoded", reflect.TypeOf((*MockReader)(nil).ReadBase64Encoded), d, ct)
}

// MockUploader is a mock of Uploader interface
type MockUploader struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderMockRecorder
}

// MockUploaderMockRecorder is the mock recorder for MockUploader
type MockUploaderMockRecorder struct {
	mock *MockUploader
}

// NewMockUploader creates a new mock instance
func NewMockUploader(ctrl *gomock.Controller) *MockUploader {
	mock := &MockUploader{ctrl: ctrl}
	mock.recorder = &MockUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUploader) EXPECT() *MockUploaderMockRecorder {
	return m.recorder
}

// UploadFromMultipart mocks base method
func (m *MockUploader) UploadFromMultipart(ctx context.Context, bucket string, fo s3.FileOpener, fi s3.FileInfo) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFromMultipart", ctx, bucket, fo, fi)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFromMultipart indicates an expected call of UploadFromMultipart
func (mr *MockUploaderMockRecorder) UploadFromMultipart(ctx, bucket, fo, fi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFromMultipart", reflect.TypeOf((*MockUploader)(nil).UploadFromMultipart), ctx, bucket, fo, fi)
}

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockPublisher) Publish(ctx context.Context, payload string, attributes map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, payload, attributes)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockPublisherMockRecorder) Publish(ctx, payload, attributes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPublisher)(nil).Publish), ctx, payload, attributes)
}
